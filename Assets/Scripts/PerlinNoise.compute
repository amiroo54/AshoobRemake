#pragma kernel CSmain

float Scale;
float Res;
float AnFLenght;
int seed;
float2 Offset;

StructuredBuffer<float2> FreqAndAmp;
RWStructuredBuffer<float3> Output;


float dropOff(float x)
{
    float v = 1 - abs(x);
    return 3 * v * v - 2 * v * v * v;
}

float PerlinNoise(float2 id)
{
    float2 g = normalize(float2(0.2, 0.1));
    float2 v = float2(id.xy) / (Res * 0.5) - float2(1.0, 1.0);
    return dot(g, v) * dropOff(v.x) * dropOff(v.y);
}

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

float Unity_GradientNoise_float(float2 UV, float Scale)
{
    return unity_gradientNoise(UV * Scale) + 0.5;
}


[numthreads(1, 1, 1)]
void CSmain(uint3 id : SV_DispatchThreadID)
{
    float noise = 0.0f;

    for (int i = 0; i < AnFLenght; i++)
    {
        noise += FreqAndAmp[i].y * Unity_GradientNoise_float(float2(
            FreqAndAmp[i].x * id.x / Res + seed + Offset.x,
            FreqAndAmp[i].x * id.y / Res + seed + Offset.y), Scale) - FreqAndAmp[i].y / 2;
    }
    Output[id.x * Res + id.y] = float3(id.x, noise, id.y);
}

