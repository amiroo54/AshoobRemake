#pragma kernel CSmain
#pragma kernel MeshDatamain
#pragma kernel Normalmain
#pragma kernel VertDatamain

//variables
float Scale;
int Res;
float AnFLenght;
int seed;
float2 Offset;


//structs
struct MeshData
{
    int TriIndex1;
    int TriIndex2;
    int TriIndex3;
};

struct VertData
{
    float color;
    float UVx;
    float UVy;
};


//buffers
StructuredBuffer<float2> FreqAndAmp;
RWStructuredBuffer<float3> Output;
RWStructuredBuffer<VertData> vertdata;
RWStructuredBuffer<int> meshdata;
RWStructuredBuffer<float3> Normals;
RWBuffer<float> MinMaxHeight;


//functions
float dropOff(float x)
{
    float v = 1 - abs(x);
    return 3 * v * v - 2 * v * v * v;
}

float map(float s, float a1, float a2, float b1, float b2)
{
    return b1 + (s-a1)*(b2-b1)/(a2-a1);
}

float2 unity_gradientNoise_dir(float2 p)
{
    p = p % 289;
    float x = (34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

float unity_gradientNoise(float2 p)
{
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(unity_gradientNoise_dir(ip), fp);
    float d01 = dot(unity_gradientNoise_dir(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(unity_gradientNoise_dir(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(unity_gradientNoise_dir(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    return lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x);
}

float Unity_GradientNoise_float(float2 UV, float Scale, float Amp)
{
    return unity_gradientNoise(UV * Scale * Amp) + 0.5;
}

float ColorWeight(uint2 id)
{
    
    return id.x / Res;
    
}


//kernels
[numthreads(1, 1, 1)]
void CSmain(uint3 id : SV_DispatchThreadID)
{
    float noise = 0.0f;

    for (int i = 0; i < AnFLenght; i++)
    {
        noise += FreqAndAmp[i].y * Unity_GradientNoise_float(float2(
            (id.x / ((float)Res - 1)) + seed + Offset.x,
            (id.y / ((float)Res - 1)) + seed + Offset.y), Scale, FreqAndAmp[i].x) - FreqAndAmp[i].y / 2;
    }
    if (noise >= MinMaxHeight[1])
    {
        MinMaxHeight[1] = noise;
    }
    if (noise <= MinMaxHeight[0])
    {
        MinMaxHeight[0] = noise;
    }
    Output[id.x * Res + id.y] = float3(id.x, noise, id.y);
}

[numthreads(1, 1, 1)]
void VertDatamain(uint3 id : SV_DISPATCHTHREADID)
{
    VertData vertdatas;
    vertdatas.color = 1.0;
    vertdatas.UVx = 0;
    vertdatas.UVy = 0;
    vertdata[id.x * Res + id.y] = vertdatas;
}

[numthreads(1, 1, 1)]
void MeshDatamain(uint3 id : SV_DISPATCHTHREADID)
{
    int m;
    int triIndex = (id.x * Res + id.y) * 6;
    meshdata[triIndex + 0] = id.x * Res + id.y;
    meshdata[triIndex + 1] = id.x * Res + (id.y + 1);
    meshdata[triIndex + 2] = (id.x + 1) * Res + id.y;
    meshdata[triIndex + 3] = (id.x + 1) * Res + id.y;
    meshdata[triIndex + 4] = id.x * Res + (id.y + 1);
    meshdata[triIndex + 5] = (id.x + 1) * Res + (id.y + 1);
}

[numthreads(1, 1, 1)]
void Normalmain(uint3 id : SV_DISPATCHTHREADID)
{
    Normals[id.x * Res + id.y] = float3(0 , 0 ,0);
}